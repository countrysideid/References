Thunderbolt  3

check if a data start with a specific name: file.startswith,
check if :  os.listdir('.')

.name

tf. as_bytes

tf.as_str
tf.as_text

handle zip file:  , zipfile.Zipfile(), namelist ()¶. Return a list of archive members by name

Counter objects:

append and extend:
>>> stack.extend(['g','h'])
>>> stack
['a', 'b', 'c', ['e', 'f'], 'g', 'h']

rename:  df.rename(index=str, columns={"A": "a", "B": "c"})

change to series:
thelist = [ ['sentence 1'], ['sentence 2'], ['sentence 3'] ]
df = pd.Series( (v[0] for v in thelist) )


lambda function:
          ratings.movieId = ratings.movieId.apply(lambda x: movieid2idx[x])

dictionary: zip, zip(a,b)

split string: str.split(str="", num=string.count(str)).


rename variable based on freq:
#Product_freq = df2.Issue.value_counts()/(df2.shape[0])
#p_cat = list(Product_freq[Product_freq < 0.1].index) #change index to array
#df2.loc[:,'Issue'][ df2.loc[:,'Issue'].isin( p_cat)] = 'Other'

reading text file:

If you do not have quotes around your data:

with open('words.txt','r') as f:
    for line in f:
        for word in line.split():
          print(word)

If you want a nested list of the words in each line of the file:

with open("words.txt") as f:
    [line.split() for line in f]

Or, If you want to flatten that into a single flat list of words in the file, you might do something like this:

with open("words.txt") as f:
    [word for line in f for word in line.split()]

If you want a regex solution:

import re
with open("words.txt") as f:
    for line in f:
        for word in re.findall(r'\w+', line):
            # word by word

Or, if you want that to be a line by line generator with a regex:

with open("words.txt") as f:
    (word for line in f for word in re.findall(r'\w+', line))
    
    
 *args and **kwargs in python explained:
 
 What does variable mean here is that you do not know before hand that how many arguments can be passed to your 
 function by the user so in this case you use these two keywords. *args is used to send a non-keyworded variable 
 length argument list to the function. Here’s an example to help you get a clear idea.
 
 Usage of **kwargs
**kwargs allows you to pass keyworded variable length of arguments to a function. You should use **kwargs if you want to handle named arguments in a function. Here is an example to get you going with it:

def greet_me(**kwargs):
    if kwargs is not None:
        for key, value in kwargs.iteritems():
            print "%s == %s" %(key,value)
 
>>> greet_me(name="yasoob")
name == yasoob

cite: https://pythontips.com/2013/08/04/args-and-kwargs-in-python-explained/
